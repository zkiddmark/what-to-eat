@using Microsoft.AspNetCore.Components.Web
@namespace WhatToEatApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <script src="css/bootstrap/bootstrap.bundle.min.js"></script>
    <link rel="apple-touch-icon" sizes="180x180" href="/img/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/img/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/img/favicon/favicon-16x16.png">
    <link rel="manifest" href="/img/favicon/site.webmanifest">
    <link href="css/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>

<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script autostart="false" src="_framework/blazor.server.js"></script>
    <script type="module" src="js/firebaseAuth.js"></script>
    <script>
        async function connectionDown(options) {
            console.log("Client disconnected")
            for (var i = 0; i < options.maxRetries; i++) {
                await delay(options.retryIntervalMilliseconds);
                if (this.isDisposed) {
                    break;
                }
                try {
                    const connectionResult = await window.Blazor.reconnect();
                    if (!connectionResult) {
                        // Do something
                    }
                    // Managed to reconnect
                    return;
                } catch {
                    // Do something
                    console.error("Unable to reconnect, will try again.")
                }
            }
        }

        async function connectionUp(options) {
            console.log("Client connected.")
        }

        function delay(durationMilliseconds) {
            return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
        }

        window.Blazor.start({
            reconnectOptions: {
                maxRetries: 30,
                retryIntervalMilliseconds: 500
            },
            reconnectionHandler: {
                onConnectionDown: e => connectionDown(e),
                onConnectionUp: e => connectionUp(e)
            }
        });
    </script>
</body>

</html>
