<div class="list-group mt-3 w-auto">
    <div class="row">
        <div class="col-3 d-flex align-items-center pe-0">
            <div class="border rounded-start h-100 w-100 d-flex justify-content-center align-items-center"
                style="background-color: #e9ecef">
                <p class="my-0">Ingredients</p>
            </div>
        </div>
        <div class="col-9 ps-0">
            @if (IngredientList?.Any() ?? false)
            {
                <div class="d-flex-column">
                    <ul class="rounded-0 rounded-end list-group">
                        @foreach (var ingredient in IngredientList!)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">@ingredient
                                <button class="btn btn-danger" @onclick="() => IngredientList.Remove(ingredient)">x</button>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
    <div class="d-flex mt-1">
        <input class="form-control rounded-0 rounded-start" type="text" @bind-value="IngredientInputField"
            @bind-value:event="oninput" />
        <button class="btn btn-secondary rounded-0 rounded-end" @onclick="OnAddIngredient"
            disabled="@string.IsNullOrEmpty(IngredientInputField)">Add</button>
    </div>
</div>

@code
{
    [Parameter]
    public IList<string>? IngredientList { get; set; }

    [Parameter]
    public EventCallback<IList<string>> OnAddIngredientEvent { get; set; }

    private string IngredientInputField { get; set; } = string.Empty;
    private async Task OnAddIngredient()
    {
        if (IngredientList is null)
        {
            IngredientList = new List<string>();
        }
        IngredientList!.Add(IngredientInputField);
        await OnAddIngredientEvent.InvokeAsync(IngredientList);
        IngredientInputField = string.Empty;
    }

}