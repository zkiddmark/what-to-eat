@inject IDishService DishService;

<div class="card" style="width: 100%;">
    <div class="row g-0 justify-content-center">
        @if (TodaysDish != null)
        {
            <ResolveImageComponent DishDto=@TodaysDish />
        }
        <div class="card-body">
            <div class="row">
                <div class="col-sm-12 d-flex">
                    <h5 class="card-title mb-4">@Day.ToString() <span class="fs-6 text">@(TodaysDish != null ?
                            $"({TodaysDish?.When.Date.ToShortDateString()})" : string.Empty)</span></h5>
                    @if (TodaysDish is not null)
                    {
                        <RatingComponent CurrentRating="@TodaysDish!.Rating" OnRatingChangedEvent="@UpdateRatingAsync" />
                    }
                </div>
                <div class="row mb-4">
                    <div class="col-sm-8 d-flex align-items-center">
                        <h6 class="card-subtitle text-muted">@(TodaysDish?.Title ?? "No dish, go ahead and plan one!")
                        </h6>
                    </div>
                    @if (!string.IsNullOrEmpty(TodaysDish?.RecipeUrl))
                    {
                        <div class="col-sm-4 d-flex align-items-center">
                            <a href="@TodaysDish?.RecipeUrl" target="_blank">
                                Link to recipe<i class="bi bi-link-45deg"></i>
                            </a>
                        </div>
                    }

                </div>
                <div class="col-sm-10">
                    <p class="card-text">@(TodaysDish?.Notes)</p>
                </div>
                <IngredientsComponent DishDto="@TodaysDish"/>
            </div>
            <div class="row mt-3">
                <div class="col-xs-12 col-sm-10 mt-2">
                    <button class="btn btn-secondary w-100" @onclick="@OpenModal">@(TodaysDish != null ? "Update the dish" :
                        "Add a dish")</button>
                </div>
                @if (TodaysDish is not null)
                {
                    <div class="col-xs-12 col-sm-2 mt-2">
                        <button class="btn btn-danger w-100" @onclick="@RemoveTodaysDish">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@if (ShowModal == true)
{
    <DayCardModal Dish="@TodaysDish" Day="@Day" OnCloseEvent="@CloseModal" HandleOnSaveEvent="@HandleOnSave" />
}

@code
{
    [Parameter]
    public Days Day { get; set; }

    private DishDto? TodaysDish { get; set; }

    private bool ShowModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TodaysDish = await DishService.GetTodaysDish(Day);
    }

    public async Task HandleOnSave((DishDto dish, bool newDish) data)
    {

        switch (data.newDish)
        {
            case true:
                await DishService.AddDishAsync(data.dish);
                break;
            default:
                await DishService.UpdateDishAsync(data.dish);
                break;
        }

        TodaysDish = await DishService.GetTodaysDish(Day);
    }

    private async Task RemoveTodaysDish()
    {
        if (TodaysDish is not null)
        {
            TodaysDish.When = DateTimeOffset.MinValue;
            await DishService.UpdateDishAsync(TodaysDish);
            TodaysDish = null; // set to null since it has been "deleted".
        }
    }

    private async Task UpdateRatingAsync(int rating)
    {
        if (TodaysDish is not null)
        {
            TodaysDish!.Rating = rating;
            await HandleOnSave((TodaysDish, false));
        }
    }

    private void CloseModal(bool show)
    {
        ShowModal = !show;
        StateHasChanged();
    }

    private void OpenModal()
    {
        ShowModal = true;
        StateHasChanged();
    }

}